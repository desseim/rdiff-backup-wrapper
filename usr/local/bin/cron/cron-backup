#!/bin/sh

#    rdiff-backup-wrapper: Wraps rdiff-backup calls with systemd unit commands.
#    Copyright (C) 2021 github.com/desseim
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


BACKUP_BIN="/usr/local/bin/rdiff-backup-wrapper"

LOCK_TIMEOUT=600
LOCK_FILE_DIR="/var/lock"
CRON_SCRIPT_NAME="$(basename "${0}")"

set -e

[ -x "${BACKUP_BIN}" ] || exit 0


_echo_error () {
    printf "%s\n" "$*" >&2
}


### Arguments processing

usage () {
    echo "Usage: ${CRON_SCRIPT_NAME} -i|--identifier cron_task_id
                           -- $(basename "${BACKUP_BIN}")_options [...]"
}

arguments=$(getopt -s sh -n "${CRON_SCRIPT_NAME}" -l identifier: -o "i:" -- "${@}")
getopt_res=$?
if [ ${getopt_res} -ne 0 ]; then
    # Argument parsing error
    if [ ${getopt_res} -eq 1 ]; then usage; else _echo_error "Unexpected return value from getopt (${getopt_res}) ; this is a bug."; fi
    exit 2
fi
eval set -- "${arguments}"

unset cron_task_id
while true
do
    case "${1}" in
        --identifier|-i) cron_task_id="${2}" ; shift 2 ;;
        --) shift ;
            # remaining parameters are the ones to be forwarded later to `rdiff-backup-wrapper`
            # in order to retain correct parameter splitting, we leave them in $@ and don't assign them to a variable
            # for example, if we had 2 parameters "a    bc" and "d e f", assigning them to a variable its value would become "a    bc d e f" and information about their split in 2 "a    bc" and "d e f" parameters would be lost and couldn't be passed onto `rdiff-backup` ; "$@" on the other hand functions like a bash array and keeps such information (cf. <http://mywiki.wooledge.org/BashFAQ/050#I.27m_constructing_a_command_based_on_information_that_is_only_known_at_run_time>)
            set -- "${@}"
            break
            ;;
        *) _echo_error "Unexpected option: ${1} ; this is a bug" ; exit 3 ;;
    esac
done

# Validate required arguments

if [ -z "${LOCK_FILE_DIR}" ]; then
    _echo_error "Invalid lock file path: <${LOCK_FILE_DIR}>"
    usage
    exit 2
fi
if [ -z "${cron_task_id}" ]; then
    _echo_error "Missing required cron task label identifier"
    usage
    exit 2
fi
lock_file_path="${LOCK_FILE_DIR}/${CRON_SCRIPT_NAME}-${cron_task_id:?Cron task identifier not set -- this is a bug.}.lock"


### Backup command execution

unset NICE
unset IONICE_CMD
unset IONICE_OPT
unset NOCACHE
if [ -x /usr/bin/nice ]; then NICE="/usr/bin/nice"; fi
if [ -x /usr/bin/ionice ] && /usr/bin/ionice -c3 true 2>/dev/null; then
    IONICE_CMD="/usr/bin/ionice"
    IONICE_OPT="-c3"
fi
if [ -x /usr/bin/nocache ]; then NOCACHE="/usr/bin/nocache"; fi

# On why to use parameter expansions with alternate value (`${...:+"$..."}`) : these options should be unquoted, since `"$OPTION"` would pass en empty argument to `flock` when the `OPTION` variable is empty or null ; but `$OPTION`, despite being desirable, trigger a `shellcheck` SC2086 warning ; the alternative is to insert them quoted only when they aren't empty or null ; see <https://github.com/koalaman/shellcheck/wiki/SC2086#exceptions> for details
flock --timeout "${LOCK_TIMEOUT}" "${lock_file_path}" \
    ${NOCACHE:+"$NOCACHE"} \
    ${IONICE_CMD:+"$IONICE_CMD" $IONICE_OPT} \
    ${NICE:+"$NICE"} \
    "${BACKUP_BIN}" "${@}"

